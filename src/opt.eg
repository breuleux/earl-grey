
require:
   "./location" ->
      <<:

provide:
   hoist
   eliminate_spurious_variables


s{stats, v} =
   if [not Object.hasOwnProperty.call{stats, v}]:
      stats[v] = {
         assigns = 0
         uses = 0
         transfers = {}
         replaceable = false
      }
   stats[v]

varstats{match expr, stats} =
   #assign{#variable{v1}, #variable{v2}} ->
      s{stats, v1}.assigns += 1
      s{stats, v2}.uses += 1
      s{stats, v2}.transfers.push{v1}
   #assign{#variable{v1}, expr} ->
      s{stats, v1}.assigns += 1
      varstats{expr, stats}
   #variable{v} ->
      s{stats, v}.uses += 1
   #value ->
      pass
   #scope{vars, body} ->
      vars each #variable{v} ->
         s{stats, v}.replaceable = true
      varstats{body, stats}
   #lambda{vars, body, generator = null} ->
      vars each #variable{v} ->
         s{stats, v}.assigns += 1
      varstats{body, stats}
   other ->
      other.slice{1} each x ->
         varstats{x, stats}

replaceVars{match expr, repl} =
   #variable{v} when Object.hasOwnProperty.call{repl, v} and repl[v] ->
      #variable{repl[v]} <<: expr
   #assign{#variable{v1}, #variable{v2}} when repl[v1] == v2 or repl[v2] == v1 ->
      #multi{} <<: expr
   #variable or #value ->
      expr
   #scope{vars, body} ->
      newvars = {}
      vars each _var and #variable{v} ->
         if Object.hasOwnProperty.call{repl, v}:
            if repl[v] !== false:
               newvars.push with
                  #variable{repl[v]} <<: _var
         else:
            newvars.push{_var}
      #scope{
         newvars
         replaceVars{body, repl}
      } <<: expr
   #lambda{vars, body, generator = null} ->
      #lambda{
         vars
         replaceVars{body, repl}
         generator
      } <<: expr
   {x, *rest} ->
      [{x, *newrest} <<: expr] where newrest =
         rest each elem ->
            replaceVars{elem, repl}
   other ->
      console.error{other}
      throw E.replaceVars{"Unknown: " + String{other}}

;; decl x
;; x = f{y}
;; decl z
;; z = x
;; bab{z, z, z}
;; ===>
;; decl z
;; z = f{y}
;; bab{z, z, z}

;; repl[x] = z
;; repl[z] = _

eliminate_spurious_variables{expr} =
   stats = {=}
   varstats{expr, stats}
   repl = {=}
   items{stats} each {v, st} ->
      if st.uses == 1 and st.assigns == 1 and st.transfers.length == 1 and st.replaceable:
         {tr} = st.transfers
         st2 = s{stats, tr}
         if st2.assigns == 1 and st2.replaceable:
            repl[v] = tr
            repl[tr] = false
            st.replaceable = false
            st2.replaceable = false
   replaceVars{expr, repl}



hoist{expr} =
   {b, inner} = hoist_helper{expr}
   #scope{inner, b}

;; Nodes over which variable declarations can be hoisted. For
;; instance, #if{#multi{#deciare{x}, x}, ...} can be changed
;; into #multi{#declare{x}, #if{x, ...}}
;; This group also (implicitly) contains #scope.

hoistable = {
   .send, .array, .object, .multi
   .if, .assign
   .js_break, .js_continue, .js_return
   .js_delete, .js_throw, .js_try, .js_new
   .js_yield
}

;; Nodes over which we will *not* hoist declarations. For instance,
;; declarations inside a for loop will remain there. This group also
;; (implicitly) contains #lambda.

not_hoistable = {
   .void
   .js_while, .js_for, .js_for_in, .js_for_of, .js_label, .js_class
}

hoist_helper{match expr} =

   ;; This floats variable declarations to the top as much as
   ;; possible. It is assumed that we alpha renamed all variables
   ;; beforehand, so there is no risk of name collision. The purpose
   ;; of this phase is to avoid wrapping scopes in (function(){...}())
   ;; when generating code.

   ;; Variables are declared either as
   ;;   #scope{vars, body}   (no closure)
   ;; or as
   ;;   #lambda{vars, body}  (closure)

   ;; The return value of hoist_helper is
   ;; {new_expression, hoisted_variables}

   #symbol or #value or #variable ->
      ;; No variables here.
      {expr, {}}

   #scope{vars, body} ->
      ;; We simply merge the variables with the variables to hoist
      ;; from body.
      {newbody, inner} = hoist_helper{body}
      {newbody, inner ++ vars}

   #lambda{vars, body, generator} ->
      ;; Can't hoist past this! We create a #scope to hold the
      ;; variables hoisted from body.
      {newbody, inner} = hoist_helper{body}
      newlambda = #lambda{vars, #scope{inner, newbody} <<: body, generator} &:
         {name = expr.name}
      {newlambda <<: expr, {}}

   {type, *args} when hoistable.indexOf{type} !== -1 ->
      ;; Hoistable nodes. We assume that all the members of the node
      ;; are expressions, so we accumulate hoistable variables from
      ;; all of them.
      var accum = {}
      newargs = args each arg ->
         {b, inner} = hoist_helper{arg}
         accum ++= inner
         b
      {{type, *newargs} <<: expr, accum}

   {type, *args} when not_hoistable.indexOf{type} !== -1 ->
      ;; Not hoistable. We assume that all the members of the node are
      ;; expressions. We create #scopes for each argument, if needed.
      newargs = args each arg ->
         {b, inner} = hoist_helper{arg}
         match inner:
            {} -> b
            other ->
               #scope{inner, b}
      {{type, *newargs} <<: expr, {}}

   other ->
      ;; hoistable and not_hoistable should contain all possible node types
      throw E.syntax.illegal{"Illegal node -- this should not happen.", {node = other}}
