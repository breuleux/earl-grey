
require:
   "./helpers" ->
      protected_value
      value_mac


inject:
   mac, bind


global_variables = {
   "!="
   "!=="
   "&"
   "&+"
   "&:"
   "*"
   "+"
   "++"
   "-"
   "--"
   "/"
   "<"
   "<<"
   "<="
   "=="
   "==="
   ">"
   ">="
   ">>"
   ">>>"
   "^+"
   "|+"
   .___build_array
   .___extend
   .___hasprop
   .___js_fetch
   .___match_error
   .___node
   .___serialize_ast
   .__dirname
   .__filename
   .and
   .arguments
   .Array
   .ArrayBuffer
   .Buffer
   .clearImmediate
   .clearInterval
   .clearTimeout
   .clone
   .console
   .consume
   .contains
   .DataView
   .Date
   .decodeURI
   .decodeURIComponent
   .dir
   .encodeURI
   .encodeURIComponent
   .ENode
   .enumerate
   .equal
   .Error
   .ErrorFactory
   .eval
   .EvalError
   .exports
   .Float32Array
   .Float64Array
   .Function
   .getChecker
   .getProjector
   .getProperty
   .global
   .in
   .Infinity
   .instanceof
   .Int16Array
   .Int32Array
   .Int8Array
   .Intl
   .isFinite
   .isNaN
   .items
   .JSON
   .keys
   .Map
   .Math
   .mod
   .module
   .NaN
   .neighbours
   .nequal
   .not
   .Object
   .object
   .or
   .parseFloat
   .parseInt
   .predicate
   .process
   .product
   .Promise
   .promisify
   .Proxy
   .range
   .RangeError
   .ReferenceError
   .Reflect
   .RegExp
   .repr
   .send
   .Set
   .setImmediate
   .setInterval
   .setTimeout
   .spawn
   .Symbol
   .SyntaxError
   .super
   .take
   .this
   .TypeError
   .typeof
   .Uint16Array
   .Uint32Array
   .Uint8Array
   .Uint8ClampedArray
   .URIError
   .WeakMap
   .WeakSet
   .zip
}

global_variables each gvar ->
   bind{gvar, #variable{gvar} & {mutable = false, assigned = true}}

keywords = {
   true = protected_value{.true, true}
   false = protected_value{.false, false}
   null = protected_value{.null, null}
   undefined = protected_value{.undefined, undefined}
   pass = #variable{.undefined}
}

items{keywords} each {gvar, v} ->
   bind{gvar, v}

[items{kv} each {k, v} -> mac{k}{v}] where kv = {
   "null" = value_mac{.null, chk} where
      chk{x} = `^x === ^=null`
   "undefined" = value_mac{.undefined, chk} where
      chk{x} = `^x === ^=undefined`
   "true" = value_mac{.true, chk} where
      chk{x} = `if{^x, true, false}`
   "false" = value_mac{.false, chk} where
      chk{x} = `not ^x`
   "String" = value_mac{.String, chk, proj} where
      chk{x} = `typeof{^x} === .string`
      proj{x} = `{true, String{^x}}`
   "Number" = value_mac{.Number, chk, proj} where
      chk{x} = `typeof{^x} === .number`
      proj{x} = `{true, parseFloat{^x}}`
   "Boolean" = value_mac{.Boolean, chk, proj} where
      chk{x} = `typeof{^x} === .boolean`
      proj{x} = `{true, Boolean{^x}}`
   "Array" = value_mac{.Array, chk, proj} where
      chk{x} = `Array.isArray{^x}`
      proj{x} = `{true, [t = ^x, if{Array.isArray{t}, t, {t}}]}`
   "Function" = value_mac{.Function, chk} where
      chk{x} = `typeof{^x} === .function`
}

